#! /bin/sh
# Author: Gaudenz Steinlin <gaudenz@debian.org>
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Lernstick Firewall"
NAME=lernstick-firewall
SQUID=/usr/sbin/squid
SQUIDCONF=/etc/lernstick-firewall/squid.conf
FIREWALL=/usr/sbin/lernstick-firewall
SCRIPTNAME=/etc/init.d/$NAME
PIDFILE=squid

# Exit if the package is not installed
[ -x "$SQUID" ] || exit 0
[ -x "$FIREWALL" ] || exit 0

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# assert pidfile directory and permissions
. /etc/lernstick-firewall/lernstick-firewall.conf

if [ "$1" != "stop" ]; then
    if [ -n "$PIDDIR" -a "$PIDDIR" != "/var/run" ]; then
        if [ ! -d "$PIDDIR" ]; then
            mkdir "$PIDDIR"
        fi
        if [ "$USER" ]; then
            chown "$USER" "$PIDDIR"
        fi
        if [ "$GROUP" ]; then
            chgrp "$GROUP" "$PIDDIR"
        fi
    fi
fi

# SQUID FUNCTIONS START
find_cache_dir () {
	w=" 	" # space tab
        res=`$SQUID -k parse -f $SQUIDCONF 2>&1 |
		grep "Processing:" |
		sed s/.*Processing:\ // |
		sed -ne '
			s/^['"$w"']*'$1'['"$w"']\+[^'"$w"']\+['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
			t end;
			d;
			:end q'`
        [ -n "$res" ] || res=$2
        echo "$res"
}

grepconf () {
	w=" 	" # space tab
        res=`$SQUID -k parse -f $SQUIDCONF 2>&1 |
		grep "Processing:" |
		sed s/.*Processing:\ // |
		sed -ne '
			s/^['"$w"']*'$1'['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
			t end;
			d;
			:end q'`
	[ -n "$res" ] || res=$2
	echo "$res"
}

create_run_dir () {
	run_dir=/var/run/squid
	usr=`grepconf cache_effective_user proxy`
	grp=`grepconf cache_effective_group proxy`

	if [ "$(dpkg-statoverride --list $run_dir)" = "" ] &&
	   [ ! -e $run_dir ] ; then
		mkdir -p $run_dir
	  	chown $usr:$grp $run_dir
		[ -x /sbin/restorecon ] && restorecon $run_dir
	fi
}
start_squid () {
	cache_dir=`find_cache_dir cache_dir`
	cache_type=`grepconf cache_dir`
	run_dir=/var/run/squid

	#
	# Create run dir (needed for several workers on SMP)
	#
	create_run_dir

	#
	# Create spool dirs if they don't exist.
	#
	if test -d "$cache_dir" -a ! -d "$cache_dir/00"
	then
		log_warning_msg "Creating $DESC cache structure"
		$SQUID -z -f $SQUIDCONF
		[ -x /sbin/restorecon ] && restorecon -R $cache_dir
	fi

	umask 027
	ulimit -n 65535
	cd $run_dir
	start-stop-daemon --quiet --start \
		--pidfile $PIDFILE \
		--exec $SQUID -- -YC -f $SQUIDCONF < /dev/null
	return $?
}

stop_squid () {
	PID=`cat $PIDFILE 2>/dev/null`
	start-stop-daemon --stop --quiet --pidfile $PIDFILE --exec $SQUID
	#
	#	Now we have to wait until squid has _really_ stopped.
	#
	sleep 2
	if test -n "$PID" && kill -0 $PID 2>/dev/null
	then
		log_action_begin_msg " Waiting"
		cnt=0
		while kill -0 $PID 2>/dev/null
		do
			cnt=`expr $cnt + 1`
			if [ $cnt -gt 24 ]
			then
				log_action_end_msg 1
				return 1
			fi
			sleep 5
			log_action_cont_msg ""
		done
		log_action_end_msg 0
		return 0
	else
		return 0
	fi
}
# SQUID FUNCTIONS END

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started

    RETVAL="0"

    # start firewall rules
    logger -t lernstick-firewall "Starting firewall..."
    ${FIREWALL} start || RETVAL="2"

    # start squid if it's not running
    logger -t lernstick-firewall "Starting squid..."
    res=`$SQUID -k parse -f $SQUIDCONF 2>&1 | grep -o "FATAL .*"`
    if test -n "$res";
    then
	log_failure_msg "$res"
        RETVAL="2"
    else
	log_daemon_msg "Starting $DESC" "$NAME"
	start_squid
    fi

    case "$RETVAL" in
        0|1)
            [ "$VERBOSE" != no ] && log_end_msg 0
            ;;
        2)
            [ "$VERBOSE" != no ] && log_end_msg 1
            ;;
    esac

    return "$RETVAL"
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    RETVAL="0"

    # stop firewall rules
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "iptables"
    ${FIREWALL} stop || RETVAL="2"

    # stop squid
    log_daemon_msg "Stopping $DESC" "$NAME"
    stop_squid

    case "$RETVAL" in
        0|1)
            [ "$VERBOSE" != no ] && log_end_msg 0

            # If squid had to be KILLed it might not have removed it's pidfile
            rm -f $PIDFILE

            ;;
        2)
            [ "$VERBOSE" != no ] && log_end_msg 1
            ;;
    esac

    return "$RETVAL"
}

#
# Function to reload the firewall
#
do_reload() 
{
    RETVAL="0"

    [ "$VERBOSE" != no ] && log_daemon_msg "Reloading $DESC" "whitelist"
    ${FIREWALL} reload-whitelist || RETVAL="2"

    [ "$VERBOSE" != no ] && log_daemon_msg "Squid reconfigure"
    cat /etc/lernstick-firewall/proxy.d/* > /etc/lernstick-firewall/url_whitelist
    ${SQUID} -k reconfigure || RETVAL="2"

    case "$RETVAL" in
        0|1)
            [ "$VERBOSE" != no ] && log_end_msg 0
            ;;
        2)
            [ "$VERBOSE" != no ] && log_end_msg 1
            ;;
    esac

    return "$RETVAL"
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    status)
        if ${FIREWALL} status ; then
            [ "$VERBOSE" != no ] && log_success_msg "Firewall active"
            RETVAL=0
        else
            [ "$VERBOSE" != no ] && log_failure_msg "Firewall not active"
            RETVAL=1
        fi
        if ! status_of_proc "$SQUID" "squid" ; then
            # only change return value if squid is not running
            RETVAL=$?
        fi
        exit $RETVAL
        ;;
    reload|force-reload)
        do_reload
        ;;
    restart)
        do_stop
        case "$?" in
            0|1)
                do_start
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload}" >&2
        exit 3
        ;;
esac

exit 0
