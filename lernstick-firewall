#!/bin/bash
# Simple firewall to block network access on workstations
# Copyright (C) 2013  Gaudenz Steinlin <gaudenz@debian.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Abort on error
set -e

# trap to at least implement a block all policy on errors
trap block_all EXIT

IPTABLES="/sbin/iptables"
IP6TABLES="/sbin/ip6tables"

# Read configuration variable file if it is present
[ -r /etc/lernstick-firewall/lernstick-firewall.conf ] && . /etc/lernstick-firewall/lernstick-firewall.conf

# Parse tinyproxy configuration file, use standard config file if
# PROXY_CONF is not set
[ -z ${PROXY_CONF} ] && PROXY_CONF="/etc/tinyproxy.conf"

PROXY_UID=$(grep  -i '^User[[:space:]]'  "${PROXY_CONF}" | awk '{print $2}')
PROXY_GID=$(grep  -i '^Group[[:space:]]' "${PROXY_CONF}" | awk '{print $2}')
PROXY_PORT=$(grep -i '^Port[[:space:]]'  "${PROXY_CONF}" | awk '{print $2}')

# return value
RET=0

#
# function to block everything
#
# This is used by the exit trap to revert to a sane default state on error
#
block_all ()
{
    do_flush
    set_default DROP
}

#
# funciton to set the default policy
#
set_default ()
{
    # Default policies
    ${IPTABLES} --policy INPUT $1
    ${IPTABLES} --policy OUTPUT $1

    # This is not strictly needed as this script is not intended to
    # be used on machines forwarding packets. But just in case to be
    # safe.
    ${IPTABLES} --policy FORWARD $1

    # Also set policy on IPv6 traffic
    ${IP6TABLES} --policy INPUT $1
    ${IP6TABLES} --policy OUTPUT $1
    ${IP6TABLES} --policy FORWARD $1
}

#
# function to read in the rules file and resolve names
#
# This must be called while DNS is (still) working. This mostly
# means before the all block rule.
read_rules ()
{
    grep --extended-regexp --invert-match '^[[:space:]]*(#.*)?$' ${RULES_FILE} | while read line ; do
        resolve_rule ${line}
    done
}

#
# function to resolv all DNS names in rules first
#
# This avoids situation where some rules are needed to regain
# connectivity to the DNS Server (eg. VPN with default route)
# $1 tcp or udp
# $2 target, hostname, network or ip
# $3 port
resolve_rule ()
{
    proto=${1}
    host=${2}
    dport=${3}
    # resolve hostnames and convert to comma separated list
    ips=$(dig ${host} +short | grep -Ev '\.$' | tr '\n' ',' | sed -e 's/.$//')
    # Only use this if there is a result, otherwise use the original host field
    [ -n "${ips}" ] && host=${ips}
    # print modified rule
    echo ${proto} ${host} ${dport}
}

#
# function to add a rule to the whitelist
#
# $1 tcp or udp
# $2 target, hostname, network or ip
# $3 port
add_rule ()
{
    # Don't fail if an entry ist not resolveable
    if ! ${IPTABLES} --append whitelist --protocol ${1} --destination ${2} --dport ${3} --jump ACCEPT > /dev/null 2>&1  ; then
        echo "Setting whitelist for ${1} to ${2} on port ${3} failed." 1>&2
        RET=1
    fi
}

#
# Start the firewall
#
do_start()
{
    # Resolve rules first. This avoids the case where DNS is blocked by the default policy and
    # we need to resolve a name in the rules to make it work again. Eg. VPN connections with the
    # DNS traffic sent to the VPN
    rules=$(read_rules)

    # Flush and set default policies
    do_flush
    set_default DROP

    # allow incoming related packages
    ${IPTABLES} --append INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT

    # allow all connections to and from localhost, even for IPv6
    ${IPTABLES} --append INPUT --in-interface lo --destination 127.0.0.0/8 --jump ACCEPT
    ${IPTABLES} --append OUTPUT --out-interface lo --source 127.0.0.0/8 --jump ACCEPT
    ${IP6TABLES} --append INPUT --in-interface lo --destination ::1/128 --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --out-interface lo --source ::1/128 --jump ACCEPT

    # Allow ICMP traffic to ourselves, otherwise the ICMP port unreachables don't reach us.
    # These are sent to the public IP address of the interface, but come out of loopback
    # as the public IP is not known and might change, just allow every ICMP out of loopback.
    # ICMP traffic to other hosts is not sent out of loopback and not allowed by this rule.
    ${IPTABLES} --append OUTPUT --out-interface lo --protocol ICMP --jump ACCEPT

    # Allow outgoing DNS traffic
    ${IPTABLES} --append OUTPUT --protocol udp --dport domain --jump ACCEPT

    # access to local proxy
    ${IPTABLES} --append OUTPUT --protocol tcp --destination 127.0.0.1 --dport ${PROXY_PORT} --jump ACCEPT

    # allow outgoing traffic for proxy to port 80 on any server
    ${IPTABLES} --append OUTPUT --protocol tcp --dport http --match owner --uid-owner ${PROXY_UID} --gid-owner ${PROXY_GID} --jump ACCEPT

    # transparent proxy for port 80
    ${IPTABLES} --table nat --append OUTPUT --protocol tcp --dport http --match owner ! --uid-owner ${PROXY_UID} ! --gid-owner ${PROXY_GID} --jump REDIRECT --to-port ${PROXY_PORT}

    # whitelist rules chain, this chain will always be traversed on OUTPUT
    ${IPTABLES} --new-chain whitelist
    ${IPTABLES} --append OUTPUT --jump whitelist

    # configure additional firewall rules
    if [ -n "${rules}" ] ; then
        # loop over all rules, this funny construct is needed to not
        # spawn a subshell. Using a pipe would spawn a subshell. This redirects the output
        # of the grep command into the for loop where it's read line by line.
        # We don't want to spawn a subshell because otherwise the RET global variable can't be
        # set from inside the loop.
        while read line ; do
            add_rule ${line}
        done < <(echo "${rules}")
    fi

    # Log rejected traffic
    ${IPTABLES} --append INPUT --jump LOG
    ${IPTABLES} --append OUTPUT --jump LOG

    # reject local outgoing pakets instead of just dropping
    ${IPTABLES} --append OUTPUT --jump REJECT
}

# Flush firewall rules
do_flush()
{
    # Flush all chains we modify
    ${IPTABLES} --flush INPUT
    ${IPTABLES} --flush OUTPUT
    ${IPTABLES} --table nat --flush OUTPUT
    if ${IPTABLES} --list whitelist -n >/dev/null 2>&1 ; then
        ${IPTABLES} --flush whitelist
        ${IPTABLES} --delete-chain whitelist
    fi
    ${IP6TABLES} --flush INPUT
    ${IP6TABLES} --flush OUTPUT
}

#
# Stop firewall and allow everything
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

    # flush rules
    do_flush
    set_default ACCEPT
}

#
# Reload rules
#
do_reload() {

    # load new rules
    do_start

	return 0
}

case "$1" in
  start)
	do_start
	;;
  stop)
	do_stop
	;;
  reload)
	do_reload
	;;
  restart)
	do_stop
	do_start
	;;
  *)
	echo "Usage: $0 {start|stop|reload|restart}" >&2
	exit 3
	;;
esac

trap '' EXIT

exit ${RET}

:
