#! /bin/sh
### BEGIN INIT INFO
# Provides:          lernstick-firewall
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Lernstick Firewall
# Description:       Simple firewall for the Lernstick
### END INIT INFO

# Author: Gaudenz Steinlin <gaudenz@debian.org>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Lernstick Firewall"
NAME=lernstick-firewall
TINYPROXY=/usr/sbin/tinyproxy
FIREWALL=/usr/sbin/lernstick-firewall
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$TINYPROXY" ] || exit 0
[ -x "$FIREWALL" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# assert pidfile directory and permissions
. /etc/lernstick-firewall/lernstick-firewall.conf

if [ "$1" != "stop" ]; then
    if [ -f "$PROXY_CONF" ]; then
        USER=$(grep    -i '^User[[:space:]]'    "$PROXY_CONF" | awk '{print $2}')
        GROUP=$(grep   -i '^Group[[:space:]]'   "$PROXY_CONF" | awk '{print $2}')
        PIDFILE=$(grep -i '^PidFile[[:space:]]' "$PROXY_CONF" | awk '{print $2}' |\
                  sed -e 's/"//g')
        PIDDIR=`dirname "$PIDFILE"`
        if [ -n "$PIDDIR" -a "$PIDDIR" != "/var/run" ]; then
	        if [ ! -d "$PIDDIR" ]; then
                mkdir "$PIDDIR"
            fi
            if [ "$USER" ]; then
                chown "$USER" "$PIDDIR"
            fi
            if [ "$GROUP" ]; then
                chgrp "$GROUP" "$PIDDIR"
            fi
        fi
    fi
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	start-stop-daemon --start --quiet  --exec $TINYPROXY --pidfile $PIDFILE --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --exec $TINYPROXY --pidfile $PIDFILE -- -c $PROXY_CONF \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.

    # start firewall rules
    ${FIREWALL} start
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name tinyproxy
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	# If tinyproxy had to be KILLed it might not have removed it's pidfile
	rm -f $PIDFILE
    
    # stop firewall rules
    ${FIREWALL} stop

	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name tinyproxy
    ${FIREWALL} reload
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload}" >&2
	exit 3
	;;
esac

:
