#!/bin/bash
# Simple firewall to block network access on workstations
# Copyright (C) 2013  Gaudenz Steinlin <gaudenz@debian.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Abort on error
set -e

# trap to at least implement a block all policy on errors
trap block_all EXIT

IPTABLES="/sbin/iptables"
IP6TABLES="/sbin/ip6tables"
PROXY_UID=proxy
PROXY_GID=proxy
PROXY_PORT_DIRECT=3127
PROXY_PORT_HTTP=3128
PROXY_PORT_HTTPS=3129

# Read configuration variable file if it is present
[ -r /etc/lernstick-firewall/lernstick-firewall.conf ] && . /etc/lernstick-firewall/lernstick-firewall.conf

# return value
RET=0

#
# function to block everything
#
# This is used by the exit trap to revert to a sane default state on error
#
block_all ()
{
    do_flush
    set_default DROP
}

#
# function to set the default policy
#
set_default ()
{
    # Default policies
    ${IPTABLES} --policy INPUT $1
    ${IPTABLES} --policy OUTPUT $1

    # This is not strictly needed as this script is not intended to
    # be used on machines forwarding packets. But just in case to be
    # safe.
    ${IPTABLES} --policy FORWARD $1

    # Also set policy on IPv6 traffic
    ${IP6TABLES} --policy INPUT $1
    ${IP6TABLES} --policy OUTPUT $1
    ${IP6TABLES} --policy FORWARD $1
}

#
# function to read in the rules file and resolve names
#
# This must be called while DNS is (still) working. This mostly
# means before the all block rule.
read_rules ()
{
    grep --extended-regexp --invert-match '^[[:space:]]*(#.*)?$' ${1} | while read line ; do
        resolve_rule ${line}
    done
}

#
# function to check if a string is a valid IPv4 address
#
# $1 string to test
is_ipv4 ()
{
    echo "${1}" | grep --extended-regexp --quiet "^((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])$"
}

#
# function to resolve all DNS names in rules first
#
# This avoids situation where some rules are needed to regain
# connectivity to the DNS Server (eg. VPN with default route)
# $1 TCP or UDP
# $2 target, hostname, network or ip
# $3 port
resolve_rule ()
{
    proto=${1}
    host=${2}
    dport=${3}
    if ! is_ipv4 "${host}" ; then
        # resolve hostnames and convert to comma separated list
        if out=$(dig ${host} +short) ; then
            ips=$(echo "$out" | grep --extended-regexp --invert-match '\.$' | tr '\n' ',' | sed -e 's/.$//')
            # Only use this if there is a result, otherwise use the original host field
            [ -n "${ips}" ] && host=${ips}
        fi
    fi
    # print modified rule
    echo ${proto} ${host} ${dport}
}

#
# function to add a rule to the whitelist
#
# $1 TCP or UDP
# $2 target, hostname, network or ip
# $3 port
# $4 direction
add_rule ()
{
    [ "${4}" = 'INPUT' ] &&  match="source" || match="destination"

    # Don't fail if an entry ist not resolveable
    if ! ${IPTABLES} --append whitelist_${4} --protocol ${1} --${match} ${2} --dport ${3} --jump ACCEPT > /dev/null 2>&1 ; then
        echo "Setting whitelist for ${1} to ${2} on port ${3} on chain whitelist_${4} failed." 1>&2
        RET=1
    fi
}

#
# Creates an empty chain if it does not already exist
#
# $1 chain name
create_chain ()
{
    if ! ${IPTABLES} --list $1 -n >/dev/null 2>&1 ; then
        ${IPTABLES} --new-chain $1
    fi
}

#
# Start the firewall
#
do_start()
{
    logger -t lernstick-firewall "setting default policies"
    # Flush and set default policies
    do_flush
    set_default DROP

    # allow related packages
    ${IPTABLES} --append INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT
    ${IPTABLES} --append OUTPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT
    ${IP6TABLES} --append INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT

    # allow all connections to and from localhost, even for IPv6
    ${IPTABLES} --append INPUT --in-interface lo --destination 127.0.0.0/8 --jump ACCEPT
    ${IPTABLES} --append OUTPUT --out-interface lo --source 127.0.0.0/8 --jump ACCEPT
    ${IP6TABLES} --append INPUT --in-interface lo --destination ::1/128 --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --out-interface lo --source ::1/128 --jump ACCEPT

    # allow ICMP
    ${IPTABLES} --append INPUT --protocol ICMP --jump ACCEPT
    ${IPTABLES} --append OUTPUT --protocol ICMP --jump ACCEPT
    ${IP6TABLES} --append INPUT --protocol IPv6-ICMP -j ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol IPv6-ICMP -j ACCEPT

    # allow IGMP
    ${IPTABLES} --append INPUT --protocol IGMP --jump ACCEPT
    ${IPTABLES} --append OUTPUT --protocol IGMP --jump ACCEPT

    # allow incoming broadcasts
    ${IPTABLES} --append INPUT -m pkttype --pkt-type broadcast --jump ACCEPT

    # allow outgoing DNS traffic
    ${IPTABLES} --append OUTPUT --protocol UDP --dport domain --jump ACCEPT

    # allow Multicast DNS
    ${IPTABLES} --append INPUT --protocol UDP --destination 224.0.0.251 --dport mdns --jump ACCEPT
    ${IPTABLES} --append OUTPUT --protocol UDP --destination 224.0.0.251 --dport mdns --jump ACCEPT
    ${IP6TABLES} --append INPUT --protocol UDP --destination ff02::fb --dport mdns --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol UDP --destination ff02::fb --dport mdns --jump ACCEPT

    # allow DHCP lease renewal
    ${IPTABLES} --append INPUT --protocol UDP --sport bootps --dport bootpc --jump ACCEPT
    ${IPTABLES} --append OUTPUT --protocol UDP --sport bootpc --dport bootps --jump ACCEPT
    ${IP6TABLES} --append INPUT --protocol UDP --sport bootps --dport bootpc --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol UDP --sport bootpc --dport bootps --jump ACCEPT

    # allow NTP requests
    ${IPTABLES} --append OUTPUT --protocol UDP --dport ntp --jump ACCEPT

    # allow DHCPv6 (dhcpv6-client = 546, dhcpv6-server = 547)
    ${IP6TABLES} --append INPUT --protocol UDP --dport 546 --jump ACCEPT
    ${IP6TABLES} --append INPUT --protocol TCP --dport 546 --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol UDP --dport 547 --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol TCP --dport 547 --jump ACCEPT

    # allow some CUPS printer probes:
    # Canon (Port 8610: MFNP Service, Port 8612: BJNP Port 2)
    ${IPTABLES} --append OUTPUT  --protocol UDP --sport 8612 --dport 8610 --jump ACCEPT
    ${IPTABLES} --append OUTPUT  --protocol UDP --sport 8612 --dport 8612 --jump ACCEPT
    ${IP6TABLES} --append OUTPUT  --protocol UDP --destination ff02::/16 --sport 8612 --dport 8610 --jump ACCEPT
    ${IP6TABLES} --append OUTPUT  --protocol UDP --destination ff02::/16 --sport 8612 --dport 8612 --jump ACCEPT
    # some Samsung printers
    ${IPTABLES} --append OUTPUT  --protocol UDP --destination 255.255.255.255 --dport 1124 --jump ACCEPT
    # Epson ENPC
    ${IPTABLES} --append OUTPUT  --protocol UDP --destination 255.255.255.255 --dport 3289 --jump ACCEPT

    # access to local proxy
    ${IPTABLES} --append OUTPUT --protocol TCP --destination 127.0.0.1 --dport ${PROXY_PORT_DIRECT} --jump ACCEPT
    ${IPTABLES} --append OUTPUT --protocol TCP --destination 127.0.0.1 --dport ${PROXY_PORT_HTTP} --jump ACCEPT
    ${IPTABLES} --append OUTPUT --protocol TCP --destination 127.0.0.1 --dport ${PROXY_PORT_HTTPS} --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol TCP --destination ::1 --dport ${PROXY_PORT_DIRECT} --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol TCP --destination ::1 --dport ${PROXY_PORT_HTTP} --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol TCP --destination ::1 --dport ${PROXY_PORT_HTTPS} --jump ACCEPT

    # allow outgoing traffic for proxy to http and https on any server
    ${IPTABLES} --append OUTPUT --protocol TCP --dport http --match owner --uid-owner ${PROXY_UID} --gid-owner ${PROXY_GID} --jump ACCEPT
    ${IPTABLES} --append OUTPUT --protocol TCP --dport https --match owner --uid-owner ${PROXY_UID} --gid-owner ${PROXY_GID} --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol TCP --dport http --match owner --uid-owner ${PROXY_UID} --gid-owner ${PROXY_GID} --jump ACCEPT
    ${IP6TABLES} --append OUTPUT --protocol TCP --dport https --match owner --uid-owner ${PROXY_UID} --gid-owner ${PROXY_GID} --jump ACCEPT

    # setup NAT forwarding of http and https to squid
    ${IPTABLES} -t nat -A OUTPUT -p TCP --dport http -m owner ! --gid-owner ${PROXY_GID} -j REDIRECT --to-port ${PROXY_PORT_HTTP}
    ${IPTABLES} -t nat -A OUTPUT -p TCP --dport https -m owner ! --gid-owner ${PROXY_GID} -j REDIRECT --to-port ${PROXY_PORT_HTTPS}
    ${IP6TABLES} -t nat -A OUTPUT -p TCP --dport http -m owner ! --gid-owner ${PROXY_GID} -j REDIRECT --to-port ${PROXY_PORT_HTTP}
    ${IP6TABLES} -t nat -A OUTPUT -p TCP --dport https -m owner ! --gid-owner ${PROXY_GID} -j REDIRECT --to-port ${PROXY_PORT_HTTPS}

    # Regenerate CA cert
    #openssl req -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -extensions v3_ca \
    #       -keyout /etc/lernstick-firewall/ca.pem \
    #       -out /etc/lernstick-firewall/ca.pem \
    #       -subj '/C=CH/ST=Aargau/L=Windisch/O=FHNW/OU=Imedias/CN=Lernstick'

    # Generate certdb if on new system
    rm -rf $HOME/.pki
    mkdir -p $HOME/.pki/nssdb
    echo "AO+IOJ!jr6s" > $HOME/.pki/pw
    certutil -d $HOME/.pki/nssdb -N -f $HOME/.pki/pw
    rm -f $HOME/.pki/pw

    # Recreate dynamic SSL cert DB
    rm -rf /var/lib/squid/ssl_db
    mkdir -p /var/lib/squid
    /usr/lib/squid/security_file_certgen -c -s /var/lib/squid/ssl_db -M 500MB
    chown proxy:proxy -R /var/lib/squid/ssl_db

    # whitelist rules chain, this chain will always be traversed on OUTPUT, create it if it does not exist
    # the whitelist remains empty if not yet existing or unchanged if it already exists
    for wl in OUTPUT INPUT ; do
        create_chain whitelist_${wl}
        ${IPTABLES} --append ${wl} --jump whitelist_${wl}
    done

    # log everything that passed the rules above
    ${IPTABLES} --append INPUT --jump LOG
    ${IPTABLES} --append OUTPUT --jump LOG
    ${IP6TABLES} --append INPUT --jump LOG
    ${IP6TABLES} --append OUTPUT --jump LOG

    # reject local outgoing pakets instead of just dropping
    ${IPTABLES} --append OUTPUT --jump REJECT
    ${IP6TABLES} --append OUTPUT --jump REJECT
}

# Flush firewall rules
do_flush()
{
    # Flush all chains we modify
    ${IPTABLES} --flush INPUT
    ${IPTABLES} --flush OUTPUT
    ${IPTABLES} --table nat --flush OUTPUT
    ${IP6TABLES} --flush INPUT
    ${IP6TABLES} --flush OUTPUT

    # Remove the NAT redirection rules to have full access without squid
    ${IPTABLES} -t nat -F
}

#
# Stop firewall and allow everything
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    # flush rules
    do_flush
    set_default ACCEPT
}

#
# Check status of firewall
#
do_status()
{
    # Check if the firewall is running. We assume it's running if all policies are set to DROP
    ${IPTABLES}  -n -L | grep -zqE "Chain INPUT \(policy DROP\).*Chain FORWARD \(policy DROP\).*Chain OUTPUT \(policy DROP\)" && \
    ${IP6TABLES} -n -L | grep -zqE "Chain INPUT \(policy DROP\).*Chain FORWARD \(policy DROP\).*Chain OUTPUT \(policy DROP\)" && RET=0 || RET=$?
}

#
# Reload whitelist rules
#
# $1 INPUT or OUTPUT
do_reload_whitelist() {

    create_chain whitelist_$1

    # Resolve rules first. This avoids the case where DNS is blocked by the default policy and
    # we need to resolve a name in the rules to make it work again. Eg. VPN connections with the
    # DNS traffic sent to the VPN
    filevar="RULES_FILE_${1}"
    rules=$(read_rules ${!filevar})

    # Flush whitelist
    ${IPTABLES} --flush whitelist_$1

    # configure additional firewall rules
    if [ -n "${rules}" ] ; then
        # loop over all rules, this funny construct is needed to not
        # spawn a subshell. Using a pipe would spawn a subshell. This redirects the output
        # of the grep command into the for loop where it's read line by line.
        # We don't want to spawn a subshell because otherwise the RET global variable can't be
        # set from inside the loop.
        while read line ; do
            add_rule ${line} $1
        done < <(echo "${rules}")
    fi

    return 0
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    reload-whitelist)
	for wl in OUTPUT INPUT ; do
            do_reload_whitelist $wl
        done
        ;;
    status)
        do_status
        ;;
    *)
        echo "Usage: $0 {start|stop|reload-whitelist|status}" >&2
        exit 3
        ;;
esac

trap '' EXIT

exit ${RET}

:
